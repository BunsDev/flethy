import { getType, Type } from 'tst-reflect'
import { Ably } from '../../../connectors/src/configs/ably.config'
import { AbstractApi } from '../../../connectors/src/configs/abstractapi.config'
import { Airtable } from '../../../connectors/src/configs/airtable.config'
import { Alchemy } from '../../../connectors/src/configs/alchemy.config'
import { Algolia } from '../../../connectors/src/configs/algolia.config'
import { ApicAgent } from '../../../connectors/src/configs/apicagent.config'
import { APIFlash } from '../../../connectors/src/configs/apiflash.config'
import { Apify } from '../../../connectors/src/configs/apify.config'
import { APIPoint } from '../../../connectors/src/configs/apipoint.config'
import { APITemplateIo } from '../../../connectors/src/configs/apitemplateio.config'
import { AssemblyAI } from '../../../connectors/src/configs/assemblyai.config'
import { Auth0 } from '../../../connectors/src/configs/auth0.config'
import { BambooHR } from '../../../connectors/src/configs/bamboohr.config'
import { BannerBear } from '../../../connectors/src/configs/bannerbear.config'
import { BaseRow } from '../../../connectors/src/configs/baserow.config'
import { Beehiiv } from '../../../connectors/src/configs/beehiiv.config'
import { BigDataCloud } from '../../../connectors/src/configs/bigdatacloud.config'
import { Bitly } from '../../../connectors/src/configs/bitly.config'
import { BooAPI } from '../../../connectors/src/configs/booapi.config'
import { Brandfetch } from '../../../connectors/src/configs/brandfetch.config'
import { BrowsersFyi } from '../../../connectors/src/configs/browsersfyi.config'
import { Bruzu } from '../../../connectors/src/configs/bruzu.config'
import { CalCom } from '../../../connectors/src/configs/calcom.config'
import { Calendarific } from '../../../connectors/src/configs/calendarific.config'
import { Camunda } from '../../../connectors/src/configs/camunda.config'
import { Canny } from '../../../connectors/src/configs/canny.config'
import { Chargebee } from '../../../connectors/src/configs/chargebee.config'
import { ChartMogul } from '../../../connectors/src/configs/chartmogul.config'
import { Carifai } from '../../../connectors/src/configs/clarifai.config'
import { Clearbit } from '../../../connectors/src/configs/clearbit.config'
import { ClickSend } from '../../../connectors/src/configs/clicksend.config'
import { ClickUp } from '../../../connectors/src/configs/clickup.config'
import { Clockify } from '../../../connectors/src/configs/clockify.config'
import { CloudFlare } from '../../../connectors/src/configs/cloudflare.config'
import { CoinCap } from '../../../connectors/src/configs/coincap.config'
import { CoinGecko } from '../../../connectors/src/configs/coingecko.config'
import { Coinlayer } from '../../../connectors/src/configs/coinlayer.config'
import { CoinMarketCap } from '../../../connectors/src/configs/coinmarketcap.config'
import { ConfigCat } from '../../../connectors/src/configs/configcat.config'
import { CongressGov } from '../../../connectors/src/configs/congressgov.config'
import { ContentFul } from '../../../connectors/src/configs/contentful.config'
import { ConvertKit } from '../../../connectors/src/configs/convertkit.config'
import { CountApi } from '../../../connectors/src/configs/countapi.config'
import { Courier } from '../../../connectors/src/configs/courier.config'
import { Covalent } from '../../../connectors/src/configs/covalent.config'
import { Cronhooks } from '../../../connectors/src/configs/cronhooks.config'
import { CurrencyScoop } from '../../../connectors/src/configs/currencyscoop.config'
import { DataDog } from '../../../connectors/src/configs/datadog.config'
import { DatoCMS } from '../../../connectors/src/configs/datocms.config'
import { DeepL } from '../../../connectors/src/configs/deepl.config'
import { DevCycle } from '../../../connectors/src/configs/devcycle.config'
import { DevTo } from '../../../connectors/src/configs/devto.config'
import { Dhl } from '../../../connectors/src/configs/dhl.config'
import { Directus } from '../../../connectors/src/configs/directus.config'
import { Disify } from '../../../connectors/src/configs/disify.config'
import { Doppler } from '../../../connectors/src/configs/doppler.config'
import { DynaPictures } from '../../../connectors/src/configs/dynapictures.config'
import { EasyDb } from '../../../connectors/src/configs/easydb.config'
import { EmailOctopus } from '../../../connectors/src/configs/emailoctopus.config'
import { Etherscan } from '../../../connectors/src/configs/etherscan.config'
import { Eventbrite } from '../../../connectors/src/configs/eventbrite.config'
import { Fauna } from '../../../connectors/src/configs/fauna.config'
import { Fibery } from '../../../connectors/src/configs/fibery.config'
import { Figma } from '../../../connectors/src/configs/figma.config'
import { Flatfile } from '../../../connectors/src/configs/flatfile.config'
import { Frankfurter } from '../../../connectors/src/configs/frankfurter.config'
import { Geekflare } from '../../../connectors/src/configs/geekflare.config'
import { Github } from '../../../connectors/src/configs/github.config'
import { GitLab } from '../../../connectors/src/configs/gitlab.config'
import { GrafBase } from '../../../connectors/src/configs/grafbase.config'
import { GraphJSON } from '../../../connectors/src/configs/graphjson.config'
import { Grist } from '../../../connectors/src/configs/grist.config'
import { HackerNews } from '../../../connectors/src/configs/hackernews.config'
import { Harvest } from '../../../connectors/src/configs/harvest.config'
import { Hashnode } from '../../../connectors/src/configs/hashnode.config'
import { HeapAnalytics } from '../../../connectors/src/configs/heapanalytics.config'
import { HelloSign } from '../../../connectors/src/configs/hellosign.config'
import { HostIo } from '../../../connectors/src/configs/hostio.config'
import { Hubspot } from '../../../connectors/src/configs/hubspot.config'
import { HunterIo } from '../../../connectors/src/configs/hunterio.config'
import { Hybiscus } from '../../../connectors/src/configs/hybiscus.config'
import { Hygraph } from '../../../connectors/src/configs/hygraph.config'
import { IncidentIo } from '../../../connectors/src/configs/incidentio.config'
import { Jira } from '../../../connectors/src/configs/jira.config'
import { Klaviyo } from '../../../connectors/src/configs/klaviyo.config'
import { Lecto } from '../../../connectors/src/configs/lecto.config'
import { Linear } from '../../../connectors/src/configs/linear.config'
import { LinkedIn } from '../../../connectors/src/configs/linkedin.config'
import { Lokalise } from '../../../connectors/src/configs/lokalise.config'
import { MailboxValidator } from '../../../connectors/src/configs/mailboxvalidator.config'
import { MailCheckAi } from '../../../connectors/src/configs/mailcheckai.config'
import { Mailchimp } from '../../../connectors/src/configs/mailchimp.config'
import { MailerSend } from '../../../connectors/src/configs/mailersend.config'
import { MailJet } from '../../../connectors/src/configs/mailjet.config'
import { MailPace } from '../../../connectors/src/configs/mailpace.config'
import { Medium } from '../../../connectors/src/configs/medium.config'
import { Mergent } from '../../../connectors/src/configs/mergent.config'
import { Mezmo } from '../../../connectors/src/configs/mezmo.config'
import { MicroDev } from '../../../connectors/src/configs/microdev.config'
import { Microlink } from '../../../connectors/src/configs/microlink.config'
import { Mixpanel } from '../../../connectors/src/configs/mixpanel.config'
import { MJML } from '../../../connectors/src/configs/mjml.config'
import { MojoAuth } from '../../../connectors/src/configs/mojoauth.config'
import { Nasa } from '../../../connectors/src/configs/nasa.config'
import { Netlify } from '../../../connectors/src/configs/netlify.config'
import { NewRelic } from '../../../connectors/src/configs/newrelic.config'
import { NewsApi } from '../../../connectors/src/configs/newsapi.config'
import { Notion } from '../../../connectors/src/configs/notion.config'
import { OCRSpace } from '../../../connectors/src/configs/ocrspace.config'
import { OneInch } from '../../../connectors/src/configs/oneinch.config'
import { OpenLibrary } from '../../../connectors/src/configs/openlibrary.config'
import { OpenSea } from '../../../connectors/src/configs/opensea.config'
import { OpenWeatherMap } from '../../../connectors/src/configs/openweathermap.config'
import { Ortto } from '../../../connectors/src/configs/ortto.config'
import { Ory } from '../../../connectors/src/configs/ory.config'
import { Parsiq } from '../../../connectors/src/configs/parsiq.config'
import { PayPal } from '../../../connectors/src/configs/paypal.config'
import { Peekalink } from '../../../connectors/src/configs/peekalink.config'
import { PeopleDataLabs } from '../../../connectors/src/configs/peopledatalabs.config'
import { Personio } from '../../../connectors/src/configs/personio.config'
import { Pinata } from '../../../connectors/src/configs/pinata.config'
import { Pipedream } from '../../../connectors/src/configs/pipedream.config'
import { Pixela } from '../../../connectors/src/configs/pixela.config'
import { PolyScale } from '../../../connectors/src/configs/polyscale.config'
import { PostHog } from '../../../connectors/src/configs/posthog.config'
import { ProductHunt } from '../../../connectors/src/configs/producthunt.config'
import { PurgoMalum } from '../../../connectors/src/configs/purgomalum.config'
import { QuickChart } from '../../../connectors/src/configs/quickchart.config'
import { RapidApi } from '../../../connectors/src/configs/rapidapi.config'
import { RedisCloud } from '../../../connectors/src/configs/rediscloud.config'
import { RemoteOk } from '../../../connectors/src/configs/remoteok.config'
import { RemoveBg } from '../../../connectors/src/configs/removebg.config'
import { Render } from '../../../connectors/src/configs/render.config'
import { RestCountries } from '../../../connectors/src/configs/restcountries.config'
import { RestDB } from '../../../connectors/src/configs/restdb.config'
import { RestZeebe } from '../../../connectors/src/configs/restzeebe.config'
import { Semrush } from '../../../connectors/src/configs/semrush.config'
import { SendGrid } from '../../../connectors/src/configs/sendgrid.config'
import { Sentry } from '../../../connectors/src/configs/sentry.config'
import { SerpApi } from '../../../connectors/src/configs/serpapi.config'
import { SerpStack } from '../../../connectors/src/configs/serpstack.config'
import { Sheety } from '../../../connectors/src/configs/sheety.config'
import { Shortcut } from '../../../connectors/src/configs/shortcut.config'
import { Shrtcode } from '../../../connectors/src/configs/shrtcode.config'
import { SideKick } from '../../../connectors/src/configs/sidekick.config'
import { Slack } from '../../../connectors/src/configs/slack.config'
import { Stackby } from '../../../connectors/src/configs/stackby.config'
import { Statically } from '../../../connectors/src/configs/statically.config'
import { Supabase } from '../../../connectors/src/configs/supabase.config'
import { Tenderly } from '../../../connectors/src/configs/tenderly.config'
import { TheCompaniesApi } from '../../../connectors/src/configs/thecompaniesapi.config'
import { TheGraph } from '../../../connectors/src/configs/thegraph.config'
import { TheStarWarsApi } from '../../../connectors/src/configs/thestarwarsapi.config'
import { Tinify } from '../../../connectors/src/configs/tinify.config'
import { TMDB } from '../../../connectors/src/configs/tmdb.config'
import { Trello } from '../../../connectors/src/configs/trello.config'
import { Tribe } from '../../../connectors/src/configs/tribe.config'
import { Twilio } from '../../../connectors/src/configs/twilio.config'
import { Typeform } from '../../../connectors/src/configs/typeform.config'
import { Unavatar } from '../../../connectors/src/configs/unavatar.config'
import { Unlayer } from '../../../connectors/src/configs/unlayer.config'
import { Unsplash } from '../../../connectors/src/configs/unsplash.config'
import { Up42 } from '../../../connectors/src/configs/up42.config'
import { UptimeRobot } from '../../../connectors/src/configs/uptimerobot.config'
import { UrlScan } from '../../../connectors/src/configs/urlscan.config'
import { UsePlunk } from '../../../connectors/src/configs/useplunk.config'
import { Web3Storage } from '../../../connectors/src/configs/web3storage.config'
import { WhoIsXMLApi } from '../../../connectors/src/configs/whoisxmlapi.config'
import { WordSimi } from '../../../connectors/src/configs/wordsimi.config'
import { YahooFinance } from '../../../connectors/src/configs/yahoofinance.config'
import { ZeroX } from '../../../connectors/src/configs/zerox.config'
import { Zora } from '../../../connectors/src/configs/zora.config'
export const configTypes: Array<{type: Type; name: string; interface: string}> = []
configTypes.push({type: getType<Ably.PublishMessage>(), name: 'Ably', interface: 'PublishMessage'})
configTypes.push({type: getType<AbstractApi.GetPublicHolidays>(), name: 'AbstractApi', interface: 'GetPublicHolidays'})
configTypes.push({type: getType<Airtable.ListTableRecords>(), name: 'Airtable', interface: 'ListTableRecords'})
configTypes.push({type: getType<Airtable.CreateTableRecords>(), name: 'Airtable', interface: 'CreateTableRecords'})
configTypes.push({type: getType<Alchemy.NftGetNFTs>(), name: 'Alchemy', interface: 'NftGetNFTs'})
configTypes.push({type: getType<Algolia.PostEvents>(), name: 'Algolia', interface: 'PostEvents'})
configTypes.push({type: getType<Algolia.AddObjectWithoutId>(), name: 'Algolia', interface: 'AddObjectWithoutId'})
configTypes.push({type: getType<Algolia.AddObjectWithId>(), name: 'Algolia', interface: 'AddObjectWithId'})
configTypes.push({type: getType<Algolia.SearchQueryIndex>(), name: 'Algolia', interface: 'SearchQueryIndex'})
configTypes.push({type: getType<ApicAgent.Get>(), name: 'ApicAgent', interface: 'Get'})
configTypes.push({type: getType<ApicAgent.Post>(), name: 'ApicAgent', interface: 'Post'})
configTypes.push({type: getType<APIFlash.Screenshot>(), name: 'APIFlash', interface: 'Screenshot'})
configTypes.push({type: getType<Apify.ListActors>(), name: 'Apify', interface: 'ListActors'})
configTypes.push({type: getType<APIPoint.UserAvatar>(), name: 'APIPoint', interface: 'UserAvatar'})
configTypes.push({type: getType<APIPoint.Weather>(), name: 'APIPoint', interface: 'Weather'})
configTypes.push({type: getType<APIPoint.FreeGifs>(), name: 'APIPoint', interface: 'FreeGifs'})
configTypes.push({type: getType<APIPoint.QRCode>(), name: 'APIPoint', interface: 'QRCode'})
configTypes.push({type: getType<APIPoint.IPDetails>(), name: 'APIPoint', interface: 'IPDetails'})
configTypes.push({type: getType<APIPoint.URLShot>(), name: 'APIPoint', interface: 'URLShot'})
configTypes.push({type: getType<APITemplateIo.CreateImage>(), name: 'APITemplateIo', interface: 'CreateImage'})
configTypes.push({type: getType<AssemblyAI.Transcribe>(), name: 'AssemblyAI', interface: 'Transcribe'})
configTypes.push({type: getType<AssemblyAI.Export>(), name: 'AssemblyAI', interface: 'Export'})
configTypes.push({type: getType<Auth0.GetAuthAccessToken>(), name: 'Auth0', interface: 'GetAuthAccessToken'})
configTypes.push({type: getType<Auth0.GetUsersByEmail>(), name: 'Auth0', interface: 'GetUsersByEmail'})
configTypes.push({type: getType<Auth0.ListOrSearchUsers>(), name: 'Auth0', interface: 'ListOrSearchUsers'})
configTypes.push({type: getType<Auth0.GetUser>(), name: 'Auth0', interface: 'GetUser'})
configTypes.push({type: getType<Auth0.CreateUser>(), name: 'Auth0', interface: 'CreateUser'})
configTypes.push({type: getType<Auth0.DeleteUser>(), name: 'Auth0', interface: 'DeleteUser'})
configTypes.push({type: getType<Auth0.GetConnections>(), name: 'Auth0', interface: 'GetConnections'})
configTypes.push({type: getType<BambooHR.EmployeesDirectory>(), name: 'BambooHR', interface: 'EmployeesDirectory'})
configTypes.push({type: getType<BannerBear.CreateImage>(), name: 'BannerBear', interface: 'CreateImage'})
configTypes.push({type: getType<BannerBear.RetrieveImage>(), name: 'BannerBear', interface: 'RetrieveImage'})
configTypes.push({type: getType<BannerBear.ListImages>(), name: 'BannerBear', interface: 'ListImages'})
configTypes.push({type: getType<BaseRow.CreateRow>(), name: 'BaseRow', interface: 'CreateRow'})
configTypes.push({type: getType<BaseRow.GetRows>(), name: 'BaseRow', interface: 'GetRows'})
configTypes.push({type: getType<Beehiiv.CreateSubscriber>(), name: 'Beehiiv', interface: 'CreateSubscriber'})
configTypes.push({type: getType<Beehiiv.GetPublications>(), name: 'Beehiiv', interface: 'GetPublications'})
configTypes.push({type: getType<BigDataCloud.ReverseGeoCodeClient>(), name: 'BigDataCloud', interface: 'ReverseGeoCodeClient'})
configTypes.push({type: getType<Bitly.CreateShortLink>(), name: 'Bitly', interface: 'CreateShortLink'})
configTypes.push({type: getType<BooAPI.UserBalance>(), name: 'BooAPI', interface: 'UserBalance'})
configTypes.push({type: getType<BooAPI.CreateTask>(), name: 'BooAPI', interface: 'CreateTask'})
configTypes.push({type: getType<BooAPI.TaskStatus>(), name: 'BooAPI', interface: 'TaskStatus'})
configTypes.push({type: getType<BooAPI.TaskResults>(), name: 'BooAPI', interface: 'TaskResults'})
configTypes.push({type: getType<Brandfetch.BrandByDomainOrId>(), name: 'Brandfetch', interface: 'BrandByDomainOrId'})
configTypes.push({type: getType<BrowsersFyi.Get>(), name: 'BrowsersFyi', interface: 'Get'})
configTypes.push({type: getType<Bruzu.CreateImage>(), name: 'Bruzu', interface: 'CreateImage'})
configTypes.push({type: getType<CalCom.FindAllAvailabilities>(), name: 'CalCom', interface: 'FindAllAvailabilities'})
configTypes.push({type: getType<CalCom.FindAnAvailability>(), name: 'CalCom', interface: 'FindAnAvailability'})
configTypes.push({type: getType<CalCom.CreateAvailability>(), name: 'CalCom', interface: 'CreateAvailability'})
configTypes.push({type: getType<CalCom.FindAllEventTypes>(), name: 'CalCom', interface: 'FindAllEventTypes'})
configTypes.push({type: getType<Calendarific.GetHolidays>(), name: 'Calendarific', interface: 'GetHolidays'})
configTypes.push({type: getType<Calendarific.GetCountries>(), name: 'Calendarific', interface: 'GetCountries'})
configTypes.push({type: getType<Calendarific.GetLanguages>(), name: 'Calendarific', interface: 'GetLanguages'})
configTypes.push({type: getType<Camunda.ConsoleToken>(), name: 'Camunda', interface: 'ConsoleToken'})
configTypes.push({type: getType<Camunda.ConsoleGetClusters>(), name: 'Camunda', interface: 'ConsoleGetClusters'})
configTypes.push({type: getType<Camunda.ConsoleGetClustersParameters>(), name: 'Camunda', interface: 'ConsoleGetClustersParameters'})
configTypes.push({type: getType<Camunda.ConsoleDeleteCluster>(), name: 'Camunda', interface: 'ConsoleDeleteCluster'})
configTypes.push({type: getType<Camunda.ConsoleCreateCluster>(), name: 'Camunda', interface: 'ConsoleCreateCluster'})
configTypes.push({type: getType<Camunda.ConsoleGetClients>(), name: 'Camunda', interface: 'ConsoleGetClients'})
configTypes.push({type: getType<Camunda.ConsoleCreateClient>(), name: 'Camunda', interface: 'ConsoleCreateClient'})
configTypes.push({type: getType<Camunda.ConsoleGetClient>(), name: 'Camunda', interface: 'ConsoleGetClient'})
configTypes.push({type: getType<Camunda.ConsoleDeleteClient>(), name: 'Camunda', interface: 'ConsoleDeleteClient'})
configTypes.push({type: getType<Canny.ListBoards>(), name: 'Canny', interface: 'ListBoards'})
configTypes.push({type: getType<Canny.RetrieveBoard>(), name: 'Canny', interface: 'RetrieveBoard'})
configTypes.push({type: getType<Canny.ListPosts>(), name: 'Canny', interface: 'ListPosts'})
configTypes.push({type: getType<Chargebee.ListSubscriptions>(), name: 'Chargebee', interface: 'ListSubscriptions'})
configTypes.push({type: getType<ChartMogul.TrackLeadAndFreeTrial>(), name: 'ChartMogul', interface: 'TrackLeadAndFreeTrial'})
configTypes.push({type: getType<Carifai.MakePredictions>(), name: 'Carifai', interface: 'MakePredictions'})
configTypes.push({type: getType<Carifai.MakePredictionsWithVersion>(), name: 'Carifai', interface: 'MakePredictionsWithVersion'})
configTypes.push({type: getType<Clearbit.LogoGet>(), name: 'Clearbit', interface: 'LogoGet'})
configTypes.push({type: getType<ClickSend.SendEmail>(), name: 'ClickSend', interface: 'SendEmail'})
configTypes.push({type: getType<ClickUp.SpacesGetAll>(), name: 'ClickUp', interface: 'SpacesGetAll'})
configTypes.push({type: getType<ClickUp.ListsGetAllFolderless>(), name: 'ClickUp', interface: 'ListsGetAllFolderless'})
configTypes.push({type: getType<ClickUp.TasksGetAll>(), name: 'ClickUp', interface: 'TasksGetAll'})
configTypes.push({type: getType<Clockify.ProjectsGetAll>(), name: 'Clockify', interface: 'ProjectsGetAll'})
configTypes.push({type: getType<CloudFlare.ListZones>(), name: 'CloudFlare', interface: 'ListZones'})
configTypes.push({type: getType<CoinCap.getAssets>(), name: 'CoinCap', interface: 'getAssets'})
configTypes.push({type: getType<CoinCap.getAsset>(), name: 'CoinCap', interface: 'getAsset'})
configTypes.push({type: getType<CoinCap.getAssetHistory>(), name: 'CoinCap', interface: 'getAssetHistory'})
configTypes.push({type: getType<CoinCap.getAssetMarkets>(), name: 'CoinCap', interface: 'getAssetMarkets'})
configTypes.push({type: getType<CoinGecko.ListCoins>(), name: 'CoinGecko', interface: 'ListCoins'})
configTypes.push({type: getType<CoinGecko.CoinsMarkets>(), name: 'CoinGecko', interface: 'CoinsMarkets'})
configTypes.push({type: getType<CoinGecko.CoinById>(), name: 'CoinGecko', interface: 'CoinById'})
configTypes.push({type: getType<CoinGecko.CoinTickersById>(), name: 'CoinGecko', interface: 'CoinTickersById'})
configTypes.push({type: getType<CoinGecko.CoinHistoryById>(), name: 'CoinGecko', interface: 'CoinHistoryById'})
configTypes.push({type: getType<CoinGecko.CoinMarketChartById>(), name: 'CoinGecko', interface: 'CoinMarketChartById'})
configTypes.push({type: getType<CoinGecko.CoinMarketChartRangeById>(), name: 'CoinGecko', interface: 'CoinMarketChartRangeById'})
configTypes.push({type: getType<CoinGecko.GetSimpleSupportedVsCurrencies>(), name: 'CoinGecko', interface: 'GetSimpleSupportedVsCurrencies'})
configTypes.push({type: getType<CoinGecko.GetSimplePrice>(), name: 'CoinGecko', interface: 'GetSimplePrice'})
configTypes.push({type: getType<CoinGecko.GetSimpleTokenPrice>(), name: 'CoinGecko', interface: 'GetSimpleTokenPrice'})
configTypes.push({type: getType<Coinlayer.GetLive>(), name: 'Coinlayer', interface: 'GetLive'})
configTypes.push({type: getType<Coinlayer.GetList>(), name: 'Coinlayer', interface: 'GetList'})
configTypes.push({type: getType<Coinlayer.GetHistorical>(), name: 'Coinlayer', interface: 'GetHistorical'})
configTypes.push({type: getType<CoinMarketCap.CryptocurrencyListingsHistorical>(), name: 'CoinMarketCap', interface: 'CryptocurrencyListingsHistorical'})
configTypes.push({type: getType<CoinMarketCap.CryptocurrencyListingsLatest>(), name: 'CoinMarketCap', interface: 'CryptocurrencyListingsLatest'})
configTypes.push({type: getType<ConfigCat.FeatureFlagGetValue>(), name: 'ConfigCat', interface: 'FeatureFlagGetValue'})
configTypes.push({type: getType<CongressGov.ListBills>(), name: 'CongressGov', interface: 'ListBills'})
configTypes.push({type: getType<CongressGov.ListAmendments>(), name: 'CongressGov', interface: 'ListAmendments'})
configTypes.push({type: getType<ContentFul.ContentGetSpace>(), name: 'ContentFul', interface: 'ContentGetSpace'})
configTypes.push({type: getType<ContentFul.ContentGetSpaceContentModel>(), name: 'ContentFul', interface: 'ContentGetSpaceContentModel'})
configTypes.push({type: getType<ContentFul.ContentGetSpaceSingleContentType>(), name: 'ContentFul', interface: 'ContentGetSpaceSingleContentType'})
configTypes.push({type: getType<ContentFul.GraphQLbySpace>(), name: 'ContentFul', interface: 'GraphQLbySpace'})
configTypes.push({type: getType<ContentFul.GraphQLbySpaceAndEnvironment>(), name: 'ContentFul', interface: 'GraphQLbySpaceAndEnvironment'})
configTypes.push({type: getType<ConvertKit.GetAccount>(), name: 'ConvertKit', interface: 'GetAccount'})
configTypes.push({type: getType<ConvertKit.ListSubscribers>(), name: 'ConvertKit', interface: 'ListSubscribers'})
configTypes.push({type: getType<CountApi.Get>(), name: 'CountApi', interface: 'Get'})
configTypes.push({type: getType<CountApi.Set>(), name: 'CountApi', interface: 'Set'})
configTypes.push({type: getType<CountApi.Update>(), name: 'CountApi', interface: 'Update'})
configTypes.push({type: getType<CountApi.Hit>(), name: 'CountApi', interface: 'Hit'})
configTypes.push({type: getType<CountApi.Create>(), name: 'CountApi', interface: 'Create'})
configTypes.push({type: getType<CountApi.Info>(), name: 'CountApi', interface: 'Info'})
configTypes.push({type: getType<Courier.Send>(), name: 'Courier', interface: 'Send'})
configTypes.push({type: getType<Covalent.ClassAGetTransactionsForAddress>(), name: 'Covalent', interface: 'ClassAGetTransactionsForAddress'})
configTypes.push({type: getType<Covalent.ClassBGetUniswapV3Pools>(), name: 'Covalent', interface: 'ClassBGetUniswapV3Pools'})
configTypes.push({type: getType<Covalent.PricingGetHistoricalTokenPrices>(), name: 'Covalent', interface: 'PricingGetHistoricalTokenPrices'})
configTypes.push({type: getType<Cronhooks.ScheduleNewWebhool>(), name: 'Cronhooks', interface: 'ScheduleNewWebhool'})
configTypes.push({type: getType<CurrencyScoop.Latest>(), name: 'CurrencyScoop', interface: 'Latest'})
configTypes.push({type: getType<CurrencyScoop.Historical>(), name: 'CurrencyScoop', interface: 'Historical'})
configTypes.push({type: getType<CurrencyScoop.Timeseries>(), name: 'CurrencyScoop', interface: 'Timeseries'})
configTypes.push({type: getType<CurrencyScoop.Currencies>(), name: 'CurrencyScoop', interface: 'Currencies'})
configTypes.push({type: getType<CurrencyScoop.Convert>(), name: 'CurrencyScoop', interface: 'Convert'})
configTypes.push({type: getType<DataDog.ValidateApiKey>(), name: 'DataDog', interface: 'ValidateApiKey'})
configTypes.push({type: getType<DataDog.PostEvent>(), name: 'DataDog', interface: 'PostEvent'})
configTypes.push({type: getType<DataDog.ListEvents>(), name: 'DataDog', interface: 'ListEvents'})
configTypes.push({type: getType<DatoCMS.Query>(), name: 'DatoCMS', interface: 'Query'})
configTypes.push({type: getType<DeepL.TranslatingRequest>(), name: 'DeepL', interface: 'TranslatingRequest'})
configTypes.push({type: getType<DeepL.GlossaryListLanguagePairs>(), name: 'DeepL', interface: 'GlossaryListLanguagePairs'})
configTypes.push({type: getType<DevCycle.Token>(), name: 'DevCycle', interface: 'Token'})
configTypes.push({type: getType<DevCycle.ListFeatures>(), name: 'DevCycle', interface: 'ListFeatures'})
configTypes.push({type: getType<DevTo.PostArticle>(), name: 'DevTo', interface: 'PostArticle'})
configTypes.push({type: getType<Dhl.TrackingUnified>(), name: 'Dhl', interface: 'TrackingUnified'})
configTypes.push({type: getType<Directus.Login>(), name: 'Directus', interface: 'Login'})
configTypes.push({type: getType<Directus.CreateCollection>(), name: 'Directus', interface: 'CreateCollection'})
configTypes.push({type: getType<Directus.ListCollections>(), name: 'Directus', interface: 'ListCollections'})
configTypes.push({type: getType<Disify.CheckSingleDomain>(), name: 'Disify', interface: 'CheckSingleDomain'})
configTypes.push({type: getType<Disify.CheckMassDomain>(), name: 'Disify', interface: 'CheckMassDomain'})
configTypes.push({type: getType<Disify.CheckSingleEmail>(), name: 'Disify', interface: 'CheckSingleEmail'})
configTypes.push({type: getType<Disify.CheckMassEmail>(), name: 'Disify', interface: 'CheckMassEmail'})
configTypes.push({type: getType<Doppler.DownloadSecrets>(), name: 'Doppler', interface: 'DownloadSecrets'})
configTypes.push({type: getType<DynaPictures.GenerateImage>(), name: 'DynaPictures', interface: 'GenerateImage'})
configTypes.push({type: getType<EasyDb.Get>(), name: 'EasyDb', interface: 'Get'})
configTypes.push({type: getType<EasyDb.Put>(), name: 'EasyDb', interface: 'Put'})
configTypes.push({type: getType<EasyDb.List>(), name: 'EasyDb', interface: 'List'})
configTypes.push({type: getType<EasyDb.Delete>(), name: 'EasyDb', interface: 'Delete'})
configTypes.push({type: getType<EmailOctopus.GetList>(), name: 'EmailOctopus', interface: 'GetList'})
configTypes.push({type: getType<EmailOctopus.CreateContact>(), name: 'EmailOctopus', interface: 'CreateContact'})
configTypes.push({type: getType<Etherscan.AccountsBalanceSingleAddress>(), name: 'Etherscan', interface: 'AccountsBalanceSingleAddress'})
configTypes.push({type: getType<Eventbrite.ListAttendeeByEventId>(), name: 'Eventbrite', interface: 'ListAttendeeByEventId'})
configTypes.push({type: getType<Eventbrite.GetUserMe>(), name: 'Eventbrite', interface: 'GetUserMe'})
configTypes.push({type: getType<Fauna.GraphQLQuery>(), name: 'Fauna', interface: 'GraphQLQuery'})
configTypes.push({type: getType<Fibery.GetSchema>(), name: 'Fibery', interface: 'GetSchema'})
configTypes.push({type: getType<Fibery.GraphQLQuery>(), name: 'Fibery', interface: 'GraphQLQuery'})
configTypes.push({type: getType<Figma.GetFile>(), name: 'Figma', interface: 'GetFile'})
configTypes.push({type: getType<Figma.GetFileNodes>(), name: 'Figma', interface: 'GetFileNodes'})
configTypes.push({type: getType<Figma.GetImages>(), name: 'Figma', interface: 'GetImages'})
configTypes.push({type: getType<Figma.GetImageFills>(), name: 'Figma', interface: 'GetImageFills'})
configTypes.push({type: getType<Flatfile.ExchangeAccessKey>(), name: 'Flatfile', interface: 'ExchangeAccessKey'})
configTypes.push({type: getType<Flatfile.ListWorkspaces>(), name: 'Flatfile', interface: 'ListWorkspaces'})
configTypes.push({type: getType<Flatfile.DownloadUpload>(), name: 'Flatfile', interface: 'DownloadUpload'})
configTypes.push({type: getType<Flatfile.DeleteUpload>(), name: 'Flatfile', interface: 'DeleteUpload'})
configTypes.push({type: getType<Flatfile.BulkDeleteUploads>(), name: 'Flatfile', interface: 'BulkDeleteUploads'})
configTypes.push({type: getType<Frankfurter.Latest>(), name: 'Frankfurter', interface: 'Latest'})
configTypes.push({type: getType<Frankfurter.Historical>(), name: 'Frankfurter', interface: 'Historical'})
configTypes.push({type: getType<Frankfurter.TimeSeries>(), name: 'Frankfurter', interface: 'TimeSeries'})
configTypes.push({type: getType<Geekflare.BrokenLink>(), name: 'Geekflare', interface: 'BrokenLink'})
configTypes.push({type: getType<Geekflare.DNSRecords>(), name: 'Geekflare', interface: 'DNSRecords'})
configTypes.push({type: getType<Geekflare.Lighthouse>(), name: 'Geekflare', interface: 'Lighthouse'})
configTypes.push({type: getType<Geekflare.Screenshot>(), name: 'Geekflare', interface: 'Screenshot'})
configTypes.push({type: getType<Geekflare.UrlToPdf>(), name: 'Geekflare', interface: 'UrlToPdf'})
configTypes.push({type: getType<Github.ListRepositoryIssues>(), name: 'Github', interface: 'ListRepositoryIssues'})
configTypes.push({type: getType<Github.RepositoriesGetContent>(), name: 'Github', interface: 'RepositoriesGetContent'})
configTypes.push({type: getType<Github.GitDatabaseGetTree>(), name: 'Github', interface: 'GitDatabaseGetTree'})
configTypes.push({type: getType<GitLab.GraphQLQuery>(), name: 'GitLab', interface: 'GraphQLQuery'})
configTypes.push({type: getType<GrafBase.GraphQLQuery>(), name: 'GrafBase', interface: 'GraphQLQuery'})
configTypes.push({type: getType<GraphJSON.Log>(), name: 'GraphJSON', interface: 'Log'})
configTypes.push({type: getType<GraphJSON.BulkLog>(), name: 'GraphJSON', interface: 'BulkLog'})
configTypes.push({type: getType<GraphJSON.Data>(), name: 'GraphJSON', interface: 'Data'})
configTypes.push({type: getType<GraphJSON.Visualization>(), name: 'GraphJSON', interface: 'Visualization'})
configTypes.push({type: getType<Grist.AddRecords>(), name: 'Grist', interface: 'AddRecords'})
configTypes.push({type: getType<Grist.FetchRecords>(), name: 'Grist', interface: 'FetchRecords'})
configTypes.push({type: getType<Grist.DescribeDocument>(), name: 'Grist', interface: 'DescribeDocument'})
configTypes.push({type: getType<HackerNews.GetItem>(), name: 'HackerNews', interface: 'GetItem'})
configTypes.push({type: getType<HackerNews.GetUser>(), name: 'HackerNews', interface: 'GetUser'})
configTypes.push({type: getType<HackerNews.GetLive>(), name: 'HackerNews', interface: 'GetLive'})
configTypes.push({type: getType<Harvest.ListProjects>(), name: 'Harvest', interface: 'ListProjects'})
configTypes.push({type: getType<Hashnode.GraphQLQuery>(), name: 'Hashnode', interface: 'GraphQLQuery'})
configTypes.push({type: getType<HeapAnalytics.ServerSideTrack>(), name: 'HeapAnalytics', interface: 'ServerSideTrack'})
configTypes.push({type: getType<HelloSign.GetAccount>(), name: 'HelloSign', interface: 'GetAccount'})
configTypes.push({type: getType<HelloSign.SendSignatureRequest>(), name: 'HelloSign', interface: 'SendSignatureRequest'})
configTypes.push({type: getType<HostIo.GetDomain>(), name: 'HostIo', interface: 'GetDomain'})
configTypes.push({type: getType<HostIo.GetDns>(), name: 'HostIo', interface: 'GetDns'})
configTypes.push({type: getType<HostIo.GetRelated>(), name: 'HostIo', interface: 'GetRelated'})
configTypes.push({type: getType<HostIo.GetFull>(), name: 'HostIo', interface: 'GetFull'})
configTypes.push({type: getType<HostIo.GetByFieldValue>(), name: 'HostIo', interface: 'GetByFieldValue'})
configTypes.push({type: getType<Hubspot.OAuthToken>(), name: 'Hubspot', interface: 'OAuthToken'})
configTypes.push({type: getType<Hubspot.FormsSubmit>(), name: 'Hubspot', interface: 'FormsSubmit'})
configTypes.push({type: getType<Hubspot.ContactsCreateOrUpdate>(), name: 'Hubspot', interface: 'ContactsCreateOrUpdate'})
configTypes.push({type: getType<HunterIo.DomainSearch>(), name: 'HunterIo', interface: 'DomainSearch'})
configTypes.push({type: getType<HunterIo.EmailFinder>(), name: 'HunterIo', interface: 'EmailFinder'})
configTypes.push({type: getType<HunterIo.AuthorFinder>(), name: 'HunterIo', interface: 'AuthorFinder'})
configTypes.push({type: getType<HunterIo.EmailVerification>(), name: 'HunterIo', interface: 'EmailVerification'})
configTypes.push({type: getType<Hybiscus.BuildReport>(), name: 'Hybiscus', interface: 'BuildReport'})
configTypes.push({type: getType<Hybiscus.GetReport>(), name: 'Hybiscus', interface: 'GetReport'})
configTypes.push({type: getType<Hygraph.ContentApiGraphQl>(), name: 'Hygraph', interface: 'ContentApiGraphQl'})
configTypes.push({type: getType<IncidentIo.ListIncidents>(), name: 'IncidentIo', interface: 'ListIncidents'})
configTypes.push({type: getType<Jira.GetIssue>(), name: 'Jira', interface: 'GetIssue'})
configTypes.push({type: getType<Jira.SearchIssues>(), name: 'Jira', interface: 'SearchIssues'})
configTypes.push({type: getType<Jira.CreateIssue>(), name: 'Jira', interface: 'CreateIssue'})
configTypes.push({type: getType<Klaviyo.TrackProfileActivity>(), name: 'Klaviyo', interface: 'TrackProfileActivity'})
configTypes.push({type: getType<Klaviyo.IdentifyProfile>(), name: 'Klaviyo', interface: 'IdentifyProfile'})
configTypes.push({type: getType<Klaviyo.GetProfileId>(), name: 'Klaviyo', interface: 'GetProfileId'})
configTypes.push({type: getType<Klaviyo.GetProfile>(), name: 'Klaviyo', interface: 'GetProfile'})
configTypes.push({type: getType<Lecto.TranslateText>(), name: 'Lecto', interface: 'TranslateText'})
configTypes.push({type: getType<Lecto.TranslateJson>(), name: 'Lecto', interface: 'TranslateJson'})
configTypes.push({type: getType<Linear.GraphQLQuery>(), name: 'Linear', interface: 'GraphQLQuery'})
configTypes.push({type: getType<LinkedIn.SharePost>(), name: 'LinkedIn', interface: 'SharePost'})
configTypes.push({type: getType<Lokalise.CreateTask>(), name: 'Lokalise', interface: 'CreateTask'})
configTypes.push({type: getType<Lokalise.ListTasks>(), name: 'Lokalise', interface: 'ListTasks'})
configTypes.push({type: getType<Lokalise.ListUsers>(), name: 'Lokalise', interface: 'ListUsers'})
configTypes.push({type: getType<Lokalise.ListTeams>(), name: 'Lokalise', interface: 'ListTeams'})
configTypes.push({type: getType<MailboxValidator.SingleEmailValidation>(), name: 'MailboxValidator', interface: 'SingleEmailValidation'})
configTypes.push({type: getType<MailboxValidator.DisposableEmail>(), name: 'MailboxValidator', interface: 'DisposableEmail'})
configTypes.push({type: getType<MailboxValidator.FreeEmail>(), name: 'MailboxValidator', interface: 'FreeEmail'})
configTypes.push({type: getType<MailCheckAi.CheckDomain>(), name: 'MailCheckAi', interface: 'CheckDomain'})
configTypes.push({type: getType<MailCheckAi.CheckEmail>(), name: 'MailCheckAi', interface: 'CheckEmail'})
configTypes.push({type: getType<Mailchimp.ListCampaigns>(), name: 'Mailchimp', interface: 'ListCampaigns'})
configTypes.push({type: getType<MailerSend.EmailSend>(), name: 'MailerSend', interface: 'EmailSend'})
configTypes.push({type: getType<MailJet.SendBasicEmail>(), name: 'MailJet', interface: 'SendBasicEmail'})
configTypes.push({type: getType<MailPace.Send>(), name: 'MailPace', interface: 'Send'})
configTypes.push({type: getType<Medium.Me>(), name: 'Medium', interface: 'Me'})
configTypes.push({type: getType<Medium.GetPublications>(), name: 'Medium', interface: 'GetPublications'})
configTypes.push({type: getType<Medium.CreatePost>(), name: 'Medium', interface: 'CreatePost'})
configTypes.push({type: getType<Medium.CreatePostUnderPublication>(), name: 'Medium', interface: 'CreatePostUnderPublication'})
configTypes.push({type: getType<Medium.GetContributorsOfPublication>(), name: 'Medium', interface: 'GetContributorsOfPublication'})
configTypes.push({type: getType<Mergent.CreateTask>(), name: 'Mergent', interface: 'CreateTask'})
configTypes.push({type: getType<Mezmo.IngestLogs>(), name: 'Mezmo', interface: 'IngestLogs'})
configTypes.push({type: getType<MicroDev.StorageDbCreateRecord>(), name: 'MicroDev', interface: 'StorageDbCreateRecord'})
configTypes.push({type: getType<MicroDev.StorageDbReadRecord>(), name: 'MicroDev', interface: 'StorageDbReadRecord'})
configTypes.push({type: getType<MicroDev.StorageDbUpdateRecord>(), name: 'MicroDev', interface: 'StorageDbUpdateRecord'})
configTypes.push({type: getType<MicroDev.StorageDbDeleteRecord>(), name: 'MicroDev', interface: 'StorageDbDeleteRecord'})
configTypes.push({type: getType<MicroDev.StorageCacheDecrement>(), name: 'MicroDev', interface: 'StorageCacheDecrement'})
configTypes.push({type: getType<MicroDev.StorageCacheDelete>(), name: 'MicroDev', interface: 'StorageCacheDelete'})
configTypes.push({type: getType<MicroDev.StorageCacheGet>(), name: 'MicroDev', interface: 'StorageCacheGet'})
configTypes.push({type: getType<MicroDev.StorageCacheIncrement>(), name: 'MicroDev', interface: 'StorageCacheIncrement'})
configTypes.push({type: getType<MicroDev.StorageCacheListKeys>(), name: 'MicroDev', interface: 'StorageCacheListKeys'})
configTypes.push({type: getType<MicroDev.StorageCacheSet>(), name: 'MicroDev', interface: 'StorageCacheSet'})
configTypes.push({type: getType<MicroDev.StorageNotesCreate>(), name: 'MicroDev', interface: 'StorageNotesCreate'})
configTypes.push({type: getType<MicroDev.StorageNotesDelete>(), name: 'MicroDev', interface: 'StorageNotesDelete'})
configTypes.push({type: getType<MicroDev.StorageNotesList>(), name: 'MicroDev', interface: 'StorageNotesList'})
configTypes.push({type: getType<MicroDev.StorageNotesRead>(), name: 'MicroDev', interface: 'StorageNotesRead'})
configTypes.push({type: getType<MicroDev.StorageNotesUpdate>(), name: 'MicroDev', interface: 'StorageNotesUpdate'})
configTypes.push({type: getType<Microlink.Url>(), name: 'Microlink', interface: 'Url'})
configTypes.push({type: getType<Mixpanel.TrackEvents>(), name: 'Mixpanel', interface: 'TrackEvents'})
configTypes.push({type: getType<Mixpanel.ImportEvents>(), name: 'Mixpanel', interface: 'ImportEvents'})
configTypes.push({type: getType<MJML.RenderMJMLToHMTL>(), name: 'MJML', interface: 'RenderMJMLToHMTL'})
configTypes.push({type: getType<MojoAuth.SendMagicLink>(), name: 'MojoAuth', interface: 'SendMagicLink'})
configTypes.push({type: getType<Nasa.AstronomyPictureOfTheDay>(), name: 'Nasa', interface: 'AstronomyPictureOfTheDay'})
configTypes.push({type: getType<Netlify.ListSites>(), name: 'Netlify', interface: 'ListSites'})
configTypes.push({type: getType<Netlify.GetEnvironmentVariables>(), name: 'Netlify', interface: 'GetEnvironmentVariables'})
configTypes.push({type: getType<NewRelic.InsightsEvents>(), name: 'NewRelic', interface: 'InsightsEvents'})
configTypes.push({type: getType<NewsApi.SearchEverything>(), name: 'NewsApi', interface: 'SearchEverything'})
configTypes.push({type: getType<Notion.CreateDatabase>(), name: 'Notion', interface: 'CreateDatabase'})
configTypes.push({type: getType<OCRSpace.ParseURL>(), name: 'OCRSpace', interface: 'ParseURL'})
configTypes.push({type: getType<OCRSpace.ParseBase64>(), name: 'OCRSpace', interface: 'ParseBase64'})
configTypes.push({type: getType<OneInch.AggregationInfoTokens>(), name: 'OneInch', interface: 'AggregationInfoTokens'})
configTypes.push({type: getType<OneInch.AggregationQuote>(), name: 'OneInch', interface: 'AggregationQuote'})
configTypes.push({type: getType<OneInch.AggregationSwap>(), name: 'OneInch', interface: 'AggregationSwap'})
configTypes.push({type: getType<OpenLibrary.Books>(), name: 'OpenLibrary', interface: 'Books'})
configTypes.push({type: getType<OpenSea.GetAssets>(), name: 'OpenSea', interface: 'GetAssets'})
configTypes.push({type: getType<OpenSea.GetCollections>(), name: 'OpenSea', interface: 'GetCollections'})
configTypes.push({type: getType<OpenWeatherMap.CurrentAndForecast>(), name: 'OpenWeatherMap', interface: 'CurrentAndForecast'})
configTypes.push({type: getType<OpenWeatherMap.Current>(), name: 'OpenWeatherMap', interface: 'Current'})
configTypes.push({type: getType<Ortto.RetrieveOneOrMorePeople>(), name: 'Ortto', interface: 'RetrieveOneOrMorePeople'})
configTypes.push({type: getType<Ory.ListOAuth2Clients>(), name: 'Ory', interface: 'ListOAuth2Clients'})
configTypes.push({type: getType<Parsiq.GetEvents>(), name: 'Parsiq', interface: 'GetEvents'})
configTypes.push({type: getType<Parsiq.GetSingleBlock>(), name: 'Parsiq', interface: 'GetSingleBlock'})
configTypes.push({type: getType<PayPal.AuthRequest>(), name: 'PayPal', interface: 'AuthRequest'})
configTypes.push({type: getType<Peekalink.Preview>(), name: 'Peekalink', interface: 'Preview'})
configTypes.push({type: getType<Peekalink.IsAvailable>(), name: 'Peekalink', interface: 'IsAvailable'})
configTypes.push({type: getType<PeopleDataLabs.CompanyEnrichment>(), name: 'PeopleDataLabs', interface: 'CompanyEnrichment'})
configTypes.push({type: getType<Personio.AuthRequest>(), name: 'Personio', interface: 'AuthRequest'})
configTypes.push({type: getType<Personio.EmployeesGet>(), name: 'Personio', interface: 'EmployeesGet'})
configTypes.push({type: getType<Personio.AbsencesGet>(), name: 'Personio', interface: 'AbsencesGet'})
configTypes.push({type: getType<Pinata.PinningPinJsonToIPFS>(), name: 'Pinata', interface: 'PinningPinJsonToIPFS'})
configTypes.push({type: getType<Pipedream.GetWorkflowEmits>(), name: 'Pipedream', interface: 'GetWorkflowEmits'})
configTypes.push({type: getType<Pipedream.ListCurrentUserSources>(), name: 'Pipedream', interface: 'ListCurrentUserSources'})
configTypes.push({type: getType<Pixela.CreateGraph>(), name: 'Pixela', interface: 'CreateGraph'})
configTypes.push({type: getType<Pixela.GetGraph>(), name: 'Pixela', interface: 'GetGraph'})
configTypes.push({type: getType<Pixela.PostValue>(), name: 'Pixela', interface: 'PostValue'})
configTypes.push({type: getType<PolyScale.GetCaches>(), name: 'PolyScale', interface: 'GetCaches'})
configTypes.push({type: getType<PolyScale.PurgeCache>(), name: 'PolyScale', interface: 'PurgeCache'})
configTypes.push({type: getType<PostHog.SendEvent>(), name: 'PostHog', interface: 'SendEvent'})
configTypes.push({type: getType<ProductHunt.GetCollections>(), name: 'ProductHunt', interface: 'GetCollections'})
configTypes.push({type: getType<PurgoMalum.Profanity>(), name: 'PurgoMalum', interface: 'Profanity'})
configTypes.push({type: getType<QuickChart.PlotChart>(), name: 'QuickChart', interface: 'PlotChart'})
configTypes.push({type: getType<RapidApi.ArticleExtractor>(), name: 'RapidApi', interface: 'ArticleExtractor'})
configTypes.push({type: getType<RedisCloud.GetCurrentAccount>(), name: 'RedisCloud', interface: 'GetCurrentAccount'})
configTypes.push({type: getType<RemoteOk.GetListings>(), name: 'RemoteOk', interface: 'GetListings'})
configTypes.push({type: getType<RemoveBg.Remove>(), name: 'RemoveBg', interface: 'Remove'})
configTypes.push({type: getType<Render.ListServices>(), name: 'Render', interface: 'ListServices'})
configTypes.push({type: getType<Render.UpdateEnvironmentVariables>(), name: 'Render', interface: 'UpdateEnvironmentVariables'})
configTypes.push({type: getType<RestCountries.GetAll>(), name: 'RestCountries', interface: 'GetAll'})
configTypes.push({type: getType<RestCountries.GetByFullName>(), name: 'RestCountries', interface: 'GetByFullName'})
configTypes.push({type: getType<RestCountries.GetByCode>(), name: 'RestCountries', interface: 'GetByCode'})
configTypes.push({type: getType<RestCountries.ListOfCodes>(), name: 'RestCountries', interface: 'ListOfCodes'})
configTypes.push({type: getType<RestDB.GetItemsFromCollection>(), name: 'RestDB', interface: 'GetItemsFromCollection'})
configTypes.push({type: getType<RestZeebe.StartInstance>(), name: 'RestZeebe', interface: 'StartInstance'})
configTypes.push({type: getType<Semrush.GetBacklinksOverview>(), name: 'Semrush', interface: 'GetBacklinksOverview'})
configTypes.push({type: getType<SendGrid.SendMail>(), name: 'SendGrid', interface: 'SendMail'})
configTypes.push({type: getType<Sentry.QueryDiscoverEvents>(), name: 'Sentry', interface: 'QueryDiscoverEvents'})
configTypes.push({type: getType<Sentry.ListProjects>(), name: 'Sentry', interface: 'ListProjects'})
configTypes.push({type: getType<SerpApi.Search>(), name: 'SerpApi', interface: 'Search'})
configTypes.push({type: getType<SerpStack.Search>(), name: 'SerpStack', interface: 'Search'})
configTypes.push({type: getType<Sheety.Get>(), name: 'Sheety', interface: 'Get'})
configTypes.push({type: getType<Sheety.Post>(), name: 'Sheety', interface: 'Post'})
configTypes.push({type: getType<Sheety.Put>(), name: 'Sheety', interface: 'Put'})
configTypes.push({type: getType<Sheety.Delete>(), name: 'Sheety', interface: 'Delete'})
configTypes.push({type: getType<Shortcut.ListCategories>(), name: 'Shortcut', interface: 'ListCategories'})
configTypes.push({type: getType<Shortcut.CreateCategory>(), name: 'Shortcut', interface: 'CreateCategory'})
configTypes.push({type: getType<Shortcut.Search>(), name: 'Shortcut', interface: 'Search'})
configTypes.push({type: getType<Shortcut.SearchEpics>(), name: 'Shortcut', interface: 'SearchEpics'})
configTypes.push({type: getType<Shortcut.SearchStories>(), name: 'Shortcut', interface: 'SearchStories'})
configTypes.push({type: getType<Shrtcode.Shorten>(), name: 'Shrtcode', interface: 'Shorten'})
configTypes.push({type: getType<Shrtcode.Info>(), name: 'Shrtcode', interface: 'Info'})
configTypes.push({type: getType<SideKick.ListApplications>(), name: 'SideKick', interface: 'ListApplications'})
configTypes.push({type: getType<SideKick.ListLogpoints>(), name: 'SideKick', interface: 'ListLogpoints'})
configTypes.push({type: getType<Slack.IncomingWebhooksMessage>(), name: 'Slack', interface: 'IncomingWebhooksMessage'})
configTypes.push({type: getType<Slack.ChatPostMessage>(), name: 'Slack', interface: 'ChatPostMessage'})
configTypes.push({type: getType<Slack.ConversationsList>(), name: 'Slack', interface: 'ConversationsList'})
configTypes.push({type: getType<Stackby.ListRows>(), name: 'Stackby', interface: 'ListRows'})
configTypes.push({type: getType<Statically.StaticZapGithub>(), name: 'Statically', interface: 'StaticZapGithub'})
configTypes.push({type: getType<Statically.StaticZapGitlab>(), name: 'Statically', interface: 'StaticZapGitlab'})
configTypes.push({type: getType<Statically.StaticZapBitbucket>(), name: 'Statically', interface: 'StaticZapBitbucket'})
configTypes.push({type: getType<Supabase.InsertRows>(), name: 'Supabase', interface: 'InsertRows'})
configTypes.push({type: getType<Supabase.ReadRows>(), name: 'Supabase', interface: 'ReadRows'})
configTypes.push({type: getType<Tenderly.ExecuteTransactionSimulation>(), name: 'Tenderly', interface: 'ExecuteTransactionSimulation'})
configTypes.push({type: getType<TheCompaniesApi.SearchCompanies>(), name: 'TheCompaniesApi', interface: 'SearchCompanies'})
configTypes.push({type: getType<TheCompaniesApi.SearchCompaniesByName>(), name: 'TheCompaniesApi', interface: 'SearchCompaniesByName'})
configTypes.push({type: getType<TheCompaniesApi.SearchCompaniesByDomain>(), name: 'TheCompaniesApi', interface: 'SearchCompaniesByDomain'})
configTypes.push({type: getType<TheCompaniesApi.FindSimilarCompanies>(), name: 'TheCompaniesApi', interface: 'FindSimilarCompanies'})
configTypes.push({type: getType<TheCompaniesApi.DetectEmployees>(), name: 'TheCompaniesApi', interface: 'DetectEmployees'})
configTypes.push({type: getType<TheCompaniesApi.EnrichBusinessEmail>(), name: 'TheCompaniesApi', interface: 'EnrichBusinessEmail'})
configTypes.push({type: getType<TheCompaniesApi.SearchCities>(), name: 'TheCompaniesApi', interface: 'SearchCities'})
configTypes.push({type: getType<TheGraph.QueryById>(), name: 'TheGraph', interface: 'QueryById'})
configTypes.push({type: getType<TheGraph.QueryByName>(), name: 'TheGraph', interface: 'QueryByName'})
configTypes.push({type: getType<TheStarWarsApi.GetEntities>(), name: 'TheStarWarsApi', interface: 'GetEntities'})
configTypes.push({type: getType<TheStarWarsApi.GetEntity>(), name: 'TheStarWarsApi', interface: 'GetEntity'})
configTypes.push({type: getType<Tinify.Shrink>(), name: 'Tinify', interface: 'Shrink'})
configTypes.push({type: getType<TMDB.Trending>(), name: 'TMDB', interface: 'Trending'})
configTypes.push({type: getType<Trello.BoardGetLists>(), name: 'Trello', interface: 'BoardGetLists'})
configTypes.push({type: getType<Trello.CardsCreate>(), name: 'Trello', interface: 'CardsCreate'})
configTypes.push({type: getType<Tribe.TribeAccessToken>(), name: 'Tribe', interface: 'TribeAccessToken'})
configTypes.push({type: getType<Twilio.SendSms>(), name: 'Twilio', interface: 'SendSms'})
configTypes.push({type: getType<Typeform.CreateApiCreateForm>(), name: 'Typeform', interface: 'CreateApiCreateForm'})
configTypes.push({type: getType<Unavatar.FromUsernameEmailDomain>(), name: 'Unavatar', interface: 'FromUsernameEmailDomain'})
configTypes.push({type: getType<Unavatar.FromProvider>(), name: 'Unavatar', interface: 'FromProvider'})
configTypes.push({type: getType<Unlayer.ListTemplates>(), name: 'Unlayer', interface: 'ListTemplates'})
configTypes.push({type: getType<Unlayer.ExportHtml>(), name: 'Unlayer', interface: 'ExportHtml'})
configTypes.push({type: getType<Unsplash.ListPhotos>(), name: 'Unsplash', interface: 'ListPhotos'})
configTypes.push({type: getType<Unsplash.SearchPhotos>(), name: 'Unsplash', interface: 'SearchPhotos'})
configTypes.push({type: getType<Up42.AuthRequest>(), name: 'Up42', interface: 'AuthRequest'})
configTypes.push({type: getType<Up42.CreditsBalance>(), name: 'Up42', interface: 'CreditsBalance'})
configTypes.push({type: getType<Up42.CatalogSearch>(), name: 'Up42', interface: 'CatalogSearch'})
configTypes.push({type: getType<UptimeRobot.GetMonitors>(), name: 'UptimeRobot', interface: 'GetMonitors'})
configTypes.push({type: getType<UrlScan.Submission>(), name: 'UrlScan', interface: 'Submission'})
configTypes.push({type: getType<UrlScan.Result>(), name: 'UrlScan', interface: 'Result'})
configTypes.push({type: getType<UrlScan.Search>(), name: 'UrlScan', interface: 'Search'})
configTypes.push({type: getType<UsePlunk.PostEvent>(), name: 'UsePlunk', interface: 'PostEvent'})
configTypes.push({type: getType<Web3Storage.UploadContent>(), name: 'Web3Storage', interface: 'UploadContent'})
configTypes.push({type: getType<WhoIsXMLApi.DomainAvailability>(), name: 'WhoIsXMLApi', interface: 'DomainAvailability'})
configTypes.push({type: getType<WordSimi.MostSimilarWords>(), name: 'WordSimi', interface: 'MostSimilarWords'})
configTypes.push({type: getType<YahooFinance.GetQuote>(), name: 'YahooFinance', interface: 'GetQuote'})
configTypes.push({type: getType<YahooFinance.GetRecommendations>(), name: 'YahooFinance', interface: 'GetRecommendations'})
configTypes.push({type: getType<YahooFinance.GetInsights>(), name: 'YahooFinance', interface: 'GetInsights'})
configTypes.push({type: getType<ZeroX.SwapQuote>(), name: 'ZeroX', interface: 'SwapQuote'})
configTypes.push({type: getType<ZeroX.SwapPrice>(), name: 'ZeroX', interface: 'SwapPrice'})
configTypes.push({type: getType<ZeroX.SwapSources>(), name: 'ZeroX', interface: 'SwapSources'})
configTypes.push({type: getType<Zora.Query>(), name: 'Zora', interface: 'Query'})